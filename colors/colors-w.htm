<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colors</title>
    <script>
        function write(selector, text) {
            const e = document.querySelector(selector);
            if (typeof text === "object") {
                for (const [k, v] of Object.entries(text)) {
                    e[k] = v;
                }
            } else {
                e.innerText = text;
            }
        }

        function pick(items) {
            return items[Math.floor(Math.random() * items.length)];
        }

        class ExpandChildren extends HTMLElement {

            connectedCallback() {

                if (this.container === undefined) {
                    this.container = this.scroller?.querySelector("& > .container") ?? undefined;
                    if (this.container === undefined) {
                        const children = [...this.children];
                        this.container = this.ownerDocument.createElement("div");
                        this.container.classList.add("container");
                        this.container.append(...children);
                    }

                    this.container.onclick = (evt) => {
                        if (this.dataset.expanded) {
                            const item = [...document.elementsFromPoint(evt.clientX, evt.clientY)].filter(e => e.parentElement === this.container)[0];
                            if (item !== undefined) {
                                this.select(item);
                                this.contract();

                                evt.stopImmediatePropagation();
                                evt.stopPropagation();
                                evt.preventDefault();
                            }
                        }
                    };
                }

                if (this.scroller === undefined) {
                    this.scroller = this.querySelector("& > .scroller") ?? undefined;
                    if (this.scroller === undefined) {
                        this.scroller = this.ownerDocument.createElement("div");
                        this.scroller.classList.add("scroller");
                        this.scroller.append(this.container);
                        this.append(this.scroller);
                    }
                }

                if (this.clicker === undefined) {
                    this.clicker = this.querySelector("& > .clicker") ?? undefined;
                    if (this.clicker === undefined) {
                        const clicker = this.ownerDocument.createElement("div");
                        clicker.classList.add("clicker");
                        clicker.innerText = "◉";
                        this.append(clicker);

                        clicker.onclick = (e) => this.toggle();

                        this.clicker = clicker;
                    }
                }
            }

            select(item) {
                for (const child of this.container.children) {
                    child.classList.remove("selected");
                }

                item.classList.add("selected");
            }

            itemWidth() {
                return this.container.firstElementChild?.getBoundingClientRect().width ?? 128;
            }

            // clickerWidth() {
            //     return this.clicker.getBoundingClientRect().width ?? 128;
            // }

            toggle() {
                // if (this.scroller.scrollLeft !== 0) {
                //     this.scroller.scrollLeft = 0;
                //     return;
                // }

                if (this.dataset.expanded) {
                    this.contract();
                } else {
                    this.expand();
                }
            }

            expand() {
                this.dataset.expanded = true;

                const count = this.container.childElementCount;
                const width = this.itemWidth();
                this.container.style.width = `${(width * count)}px`;

                let index = 0;
                for (const child of [...this.container.children]) {
                    console.log(child);
                    child.style.left = `${index * width}px`;
                    ++index;
                }
            }

            contract() {
                delete this.dataset.expanded;

                this.scroller.scroll({ left: 0, behavior: "smooth" });

                // const width = this.itemWidth();
                // this.container.style.width = `${width}px`;
                this.container.style.width = ``;

                for (const child of [...this.container.children]) {
                    child.style.left = ``;
                }
            }
        }
        customElements.define("expand-children", ExpandChildren);

    </script>
    <script type="module">
        import { colors, isColorful, coordinating, contrasting, neutrals, whites, darks, toColor } from "./colors.js";

        (function () {
            class ColorSwatch extends HTMLElement {

                connectedCallback() {
                    const color = toColor(this.dataset.color) ?? toColor("Carys");
                    this.dataset.colorJSON = JSON.stringify(color, null, 2);

                    this.style.backgroundColor = color.color;
                    this.style.fill = color.color;
                    this.style.color = color.hsl.l > 70 ? "black" : "white";

                    let title = this.querySelector(".title") ?? undefined;
                    if (title === undefined) {
                        title = this.ownerDocument.createElement("div");
                        title.classList.add("title");
                        this.append(title);
                    }

                    title.innerText = color.title.replaceAll(/[™®]/g, "");

                    let num = this.querySelector(".number") ?? undefined;
                    if (num === undefined) {
                        num = this.ownerDocument.createElement("div");
                        num.classList.add("number");
                        this.append(num);
                    }

                    num.innerText = color.number ?? "";
                }
            }

            customElements.define("color-swatch", ColorSwatch);

            function multiSwatchHTML(colors, selectedColor) {
                if (colors.length === 0) {
                    return "";
                }

                if (selectedColor === undefined) {
                    selectedColor = colors[0];
                }

                if (colors.length > 1) {
                    let isSelected = false;
                    return `<expand-children>
                    ${colors.map(color => {
                        let selected = "";
                        if (!isSelected && ((color === selectedColor) || (selectedColor === undefined))) {
                            selected = "selected";
                            isSelected = true;
                        }
                        return `<div class="swatch ${selected}"><color-swatch data-color="${color.id}"></color-swatch><a href="?primary=${color.id}"></a></div>`;
                    }).join("\n")}
                </expand-children>`;
                }

                return `<div class="swatch"><color-swatch data-color="${selectedColor.id}"></color-swatch><a href="?primary=${selectedColor.id}"></a></div>`;
            }

            function paletteHTML(palette) {
                return palette.map(colors => multiSwatchHTML(colors)).join("\n");
            }

            function pickColorful(colors) {
                while (true) {
                    const result = pick(colors);
                    if (isColorful(result)) {
                        return result;
                    }
                }
            }

            const params = new URLSearchParams(document.location.search);

            const fixedColors = params.get("colors") ?? undefined;

            if (fixedColors !== undefined) {
                const palette = fixedColors.split(",").map(name => [toColor(name.trim())]);
                document.title = `Colors - Palette`;
                document.body.innerHTML = paletteHTML(palette);
                return;
            }

            const fixedPrimary = params.get("primary") ?? undefined;

            const primary = fixedPrimary !== undefined ? toColor(fixedPrimary.trim()) : pickColorful(colors);

            document.title = `Colors - ${primary.title.replaceAll(/[™®]/g, "")}`;

            const fns = { coordinating, contrasting, darks, neutrals, whites };

            const all = { primary };
            for (const key of Object.keys(fns)) {
                all[key] = fns[key](primary);
            }

            console.log(all);
            console.log(colors);

            document.body.innerHTML = `<div class="swatch primary"><color-swatch data-color="${primary.id}"></color-swatch><a href="?primary=${primary.id}"></a></div>` + Object.keys(fns).map(key => {
                const colors = all[key].colors;

                if (colors.length === 0) {
                    return "";
                }

                const color = pick(colors);

                if (colors.length > 1) {
                    return `<expand-children>
                    ${colors.map(clr => {
                        const selected = clr === color ? "selected" : "";
                        return `<div class="swatch ${key} ${selected}" title="${key}"><color-swatch data-color="${clr.id}"></color-swatch><a href="?primary=${clr.id}"></a></div>`;
                    }).join("\n")}
                </expand-children>`;
                }

                return `<div class="swatch ${key}" title="${key}"><color-swatch data-color="${color.id}"></color-swatch><a href="?primary=${color.id}"></a></div>`;
            }).join("\n") +
                `<a href="?"><div class="random">Random</div></a>`
                ;
        })();
    </script>
    <style>
        * {
            box-sizing: border-box;
        }

        :root {
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        }

        color-swatch {
            display: block;
            width: 100%;
            height: 100%;
        }

        .swatch {
            position: relative;
            width: 16vh;
            height: 10vh;
        }

        .swatch.selected {
            z-index: 1;
        }

        color-swatch+a {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            height: 100%;
            width: 100%;
        }

        .title {
            padding: 0.5rem;
        }

        .number {
            display: none;
        }

        a {
            text-decoration: none;
        }

        expand-children {
            display: flex;
        }

        expand-children>.scroller>.container {
            /* background-color: pink; */
            position: relative;
            display: block;
            width: calc(16vh);
            height: 10vh;
            transition: width 0.6s ease;
        }

        expand-children>.scroller>.container>* {
            position: absolute;
            display: block;
            top: 0;
            left: 0;
            /* Explicit for first-time animation */
            transition: left 0.6s ease;
            scroll-snap-align: start;
        }

        expand-children>.scroller {
            max-width: calc(16vh * 4);
            overflow-y: hidden;
            overflow-x: scroll;
            scroll-snap-type: x mandatory;
        }

        expand-children>.swatch {
            position: absolute;
        }

        /* The last child is the control */
        expand-children>*:last-child {
            width: 32px;
            height: 25px;
            top: unset;
            bottom: 0px;
            left: 16vh;
            background: none;
            padding-left: 6px;
            padding-right: 6px;
        }
    </style>
</head>

<body>
    <!-- <expand-children id="e">
        <div>One</div>
        <div style="background-color: yellow; z-index: 1;"><a style="width: 100%; height: 100%;" href="#">Two</a></div>
        <div>Three</div>
        <div style="background-color: bisque;">Four</div>
        <div><a href='javascript: document.querySelector("#e").toggle()'>◉</a></div>
    </expand-children> -->
</body>

</html>