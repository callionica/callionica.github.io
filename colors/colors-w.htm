<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colors</title>
    <script>
        function write(selector, text) {
            const e = document.querySelector(selector);
            if (typeof text === "object") {
                for (const [k, v] of Object.entries(text)) {
                    e[k] = v;
                }
            } else {
                e.innerText = text;
            }
        }

        /** Selects a random item from an array **/
        function pick(items) {
            return items[Math.floor(Math.random() * items.length)];
        }

        /**
         * Shuffles an array in place
         * @param { any[] } array 
         * */
        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        class ExpandChildren extends HTMLElement {

            connectedCallback() {

                if (this.container === undefined) {
                    this.container = this.scroller?.querySelector(":scope > .container") ?? undefined;
                    if (this.container === undefined) {
                        const children = [...this.children];
                        this.container = this.ownerDocument.createElement("div");
                        this.container.classList.add("container");
                        this.container.append(...children);
                    }

                    this.container.onclick = (evt) => {
                        if (this.dataset.expanded) {
                            const item = [...document.elementsFromPoint(evt.clientX, evt.clientY)].filter(e => e.parentElement === this.container)[0];
                            if (item !== undefined) {
                                this.select(item);
                                this.contract();

                                evt.stopImmediatePropagation();
                                evt.stopPropagation();
                                evt.preventDefault();
                            }
                        }
                    };
                }

                if (this.scroller === undefined) {
                    this.scroller = this.querySelector(":scope > .scroller") ?? undefined;
                    if (this.scroller === undefined) {
                        this.scroller = this.ownerDocument.createElement("div");
                        this.scroller.classList.add("scroller");
                        this.scroller.append(this.container);
                        this.append(this.scroller);
                    }
                }

                if (this.clicker === undefined) {
                    this.clicker = this.querySelector(":scope > .clicker") ?? undefined;
                    if (this.clicker === undefined) {
                        const clicker = this.ownerDocument.createElement("div");
                        clicker.classList.add("clicker");
                        clicker.innerText = "◉";
                        this.append(clicker);

                        clicker.onclick = (e) => this.toggle();

                        this.clicker = clicker;
                    }
                }
            }

            get selectedItem() {
                return this.container.querySelector(":scope > .selected") ?? undefined;
            }

            get selectedIndex() {
                return [...this.container.children].indexOf(this.selectedItem);
            }

            select(item) {
                for (const child of this.container.children) {
                    child.classList.remove("selected");
                }

                item.classList.add("selected");
            }

            itemWidth() {
                return this.container.firstElementChild?.getBoundingClientRect().width ?? 128;
            }

            toggle() {
                if (this.dataset.expanded) {
                    this.contract();
                } else {
                    this.expand();
                }
            }

            expand() {
                this.dataset.expanded = true;

                // Scroller changes size because of the attribute change

                // Container doesn't really change size
                const count = this.container.childElementCount;
                const width = this.itemWidth();
                this.container.style.width = `${(width * count)}px`;

                let index = 0;
                
                for (const child of [...this.container.children]) {
                    console.log(child);
                    child.style.left = `${index * width}px`;
                    ++index;
                }

                // Enable scrolling
                this.scroller.style.overflowX = '';
            }

            contract() {
                delete this.dataset.expanded;

                // Scroller changes size because of the attribute change

                // Container doesn't change size
                // this.container.style.width = ``;

                const selectedLeft = this.selectedIndex * this.itemWidth();

                // All items should be positioned behind the selected item
                for (const child of [...this.container.children]) {
                    child.style.left = `${selectedLeft}px`;;
                }

                // The scroller should show the selected item
                this.scroller.scroll({ left: selectedLeft, behavior: "smooth" });

                // Disable scrolling
                setTimeout(()=>{
                    this.scroller.style.overflowX = 'hidden';
                }, 1000);
            }
        }
        customElements.define("expand-children", ExpandChildren);

    </script>
    <script type="module">
        import { colors, matrix, toColorDefault, textToPalette, paletteToQuery, paletteToText, isColorful, coordinating, contrasting, neutrals, whites, darks, toColor, colorsByPrefix, colorsBySuffix, colorsByIncludes } from "./colors.js";

        (function () {

            class ColorSwatch extends HTMLElement {

                connectedCallback() {
                    const color = toColorDefault(this.dataset.color);
                    this.dataset.colorJSON = JSON.stringify(color, null, 2);

                    this.style.backgroundColor = color.color;
                    this.style.fill = color.color;
                    this.style.color = color.hsl.l > 70 ? "black" : "white";

                    let title = this.querySelector(".title") ?? undefined;
                    if (title === undefined) {
                        title = this.ownerDocument.createElement("div");
                        title.classList.add("title");
                        this.append(title);
                    }

                    title.innerText = color.title.replaceAll(/[™®]/g, "");

                    let num = this.querySelector(".number") ?? undefined;
                    if (num === undefined) {
                        num = this.ownerDocument.createElement("div");
                        num.classList.add("number");
                        this.append(num);
                    }

                    num.innerText = color.number ?? "";
                }
            }

            customElements.define("color-swatch", ColorSwatch);

            function multiSwatchHTML(colors, selectedColor) {
                if (colors.length === 0) {
                    return "";
                }

                if (selectedColor === undefined) {
                    selectedColor = colors.find(clr => clr.selected) ?? colors[0];
                }

                if (colors.length > 1) {
                    let isSelected = false;
                    return `<expand-children>
                    ${colors.map(color => {
                        let selected = "";
                        if (!isSelected && ((color === selectedColor) || (selectedColor === undefined))) {
                            selected = "selected";
                            isSelected = true;
                        }
                        return `<div class="swatch ${selected}"><color-swatch data-color="${color.id}"></color-swatch><a href="?primary=${color.id}"></a></div>`;
                    }).join("\n")}
                </expand-children>`;
                }

                return `<div class="swatch"><color-swatch data-color="${selectedColor.id}"></color-swatch><a href="?primary=${selectedColor.id}"></a></div>`;
            }

            function paletteHTML(palette) {
                return palette.map(colors => multiSwatchHTML(colors)).join("\n");
            }

            function pickColorful(colors) {
                while (true) {
                    const result = pick(colors);
                    if (isColorful(result)) {
                        return result;
                    }
                }
            }

            /**
             * @param { string } text
             **/
            function nav(text) {
                const url = new URL(`?colors=${encodeURIComponent(text.replaceAll("\n", ","))}`, document.location);
                document.location = url;
            }

            async function pasteNav() {
                nav(await navigator.clipboard.readText());
            }

            async function copyText(text) {
                await navigator.clipboard.writeText(text);
                alert("Copied");
            }

            function doPalette(palette) {
                const text = paletteToText(palette);
                const query = paletteToQuery(palette);

                const shuffledPalette = shuffle([...palette]);
                const shuffledQuery = paletteToQuery(shuffledPalette);

                document.title = `Colors - ${palette.flatMap(colors => colors.map(color => color.title.replaceAll(/[™®]/g, ""))).join(", ")}`;
                document.body.innerHTML = `<div class="palette">${paletteHTML(palette)}</div>` +
                    `<a href="?colors=${shuffledQuery}"><div class="shuffle">Shuffle</div></a>
                <div class="pasteNav"><button>Paste from clipboard</button></div>
                <div class="copyText"><button>Copy as text</button></div>
                <a href="?"><div class="random">Random</div></a>`;

                document.querySelector(".pasteNav").onclick = () => pasteNav();
                document.querySelector(".copyText").onclick = () => copyText(text);
            }

            const params = new URLSearchParams(document.location.search);

            const fixedColors = params.get("colors") ?? undefined;

            if (fixedColors !== undefined) {
                const palette = textToPalette(fixedColors, toColorDefault);
                doPalette(palette);
                return;
            }

            const matrixColors = params.get("matrix") ?? undefined;
            if (matrixColors !== undefined) {
                const palette = textToPalette(matrixColors, toColorDefault);
                doPalette(matrix(palette));
                return;
            }

            const fixedPrimary = params.get("primary") ?? undefined;

            const primary = fixedPrimary !== undefined ? toColorDefault(fixedPrimary.trim()) : pickColorful(colors);

            document.title = `Colors - ${primary.title.replaceAll(/[™®]/g, "")}`;

            const fns = { coordinating, contrasting, darks, neutrals, whites };

            const all = { primary };
            for (const key of Object.keys(fns)) {
                all[key] = fns[key](primary);
            }

            console.log(all);
            console.log(colors);

            const palette = Object.values(all).map(a => a.colors ?? [a]);
            const text = paletteToText(palette);

            document.body.innerHTML = `<div class="swatch primary"><color-swatch data-color="${primary.id}"></color-swatch><a href="?primary=${primary.id}"></a></div>` + Object.keys(fns).map(key => {
                const colors = all[key].colors;

                if (colors.length === 0) {
                    return "";
                }

                const color = pick(colors);

                if (colors.length > 1) {
                    return `<expand-children>
                    ${colors.map(clr => {
                        const selected = clr === color ? "selected" : "";
                        return `<div class="swatch ${key} ${selected}" title="${key}"><color-swatch data-color="${clr.id}"></color-swatch><a href="?primary=${clr.id}"></a></div>`;
                    }).join("\n")}
                </expand-children>`;
                }

                return `<div class="swatch ${key}" title="${key}"><color-swatch data-color="${color.id}"></color-swatch><a href="?primary=${color.id}"></a></div>`;
            }).join("\n") +
                `
                <div class="copyText"><button>Copy as text</button></div>
                <a href="?"><div class="random">Random</div></a>
                `
                ;

            document.querySelector(".copyText").onclick = () => copyText(text);
        })();
    </script>
    <style>
        * {
            box-sizing: border-box;
        }

        button {
            font-size: inherit;
        }

        :root {
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;

            --width: 160px;
            --height: 100px;
        }

        body[data-layout='small'] {
            --width: 80px;
            --height: 50px;
        }

        color-swatch {
            display: block;
            width: 100%;
            height: 100%;
        }

        .swatch {
            position: relative;
            width: var(--width);
            height: var(--height);
        }

        .swatch.selected {
            z-index: 1;
        }

        color-swatch+a {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            height: 100%;
            width: 100%;
        }

        .title {
            padding: 0.5rem;
        }

        .number {
            display: none;
        }

        a {
            text-decoration: none;
        }

        expand-children {
            display: flex;
        }

        expand-children>.scroller>.container {
            /* background-color: pink; */
            position: relative;
            display: block;
            width: var(--width);
            height: var(--height);
            /* transition: width 0.6s ease; */
        }

        expand-children>.scroller>.container>* {
            position: absolute;
            display: block;
            top: 0;
            left: 0;
            /* Explicit for first-time animation */
            transition: left 0.6s ease;
            scroll-snap-align: start;
        }

        expand-children>.scroller {
            max-width: calc(var(--width) * 1);
            overflow-y: hidden;
            overflow-x: scroll;
            scroll-snap-type: x mandatory;
        }

        expand-children[data-expanded]>.scroller {
            max-width: calc(var(--width) * 4);
        }

        expand-children>.swatch {
            position: absolute;
        }

        /* The last child is the control */
        expand-children>*:last-child {
            width: 32px;
            height: 25px;
            top: unset;
            bottom: 0px;
            left: 16vh;
            background: none;
            padding-left: 6px;
            padding-right: 6px;
        }
    </style>
</head>

<body>
    <!-- <expand-children id="e">
        <div>One</div>
        <div style="background-color: yellow; z-index: 1;"><a style="width: 100%; height: 100%;" href="#">Two</a></div>
        <div>Three</div>
        <div style="background-color: bisque;">Four</div>
        <div><a href='javascript: document.querySelector("#e").toggle()'>◉</a></div>
    </expand-children> -->
</body>

</html>