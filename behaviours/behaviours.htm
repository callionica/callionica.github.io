<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Behaviours AKA Web Attributes</title>
	<style>
		html {
			box-sizing: border-box;
		}

		*,
		*:before,
		*:after {
			box-sizing: inherit;
		}

		* {
			margin: 0;
			padding: 0;
		}

		select {
			border-image-width: 0;
			font-size: inherit;
			margin-bottom: var(--margin);
			width: 100%;
		}

		body {
			--paper: rgb(249, 248, 245);
			--ink: hsl(214, 97%, 23%);
			--ink-2: hsl(214, 90%, 22%);
			--ink-3: silver;

			--blue: rgb(108, 115, 222);
			--brown: rgb(118, 108, 29);

			--font-size: 3vw;
			--line-height: 1.2;
			--margin: 2vw;

			--line: calc(var(--line-height) * var(--font-size));
			--five-lines: calc(5 * var(--line));
			--six-lines: calc(6 * var(--line));
			--image-height: var(--six-lines);
			--image-width: var(--image-height);
			--area-width: calc(98vw - (5 * var(--margin)));
			--content-width: calc(var(--area-width) - var(--image-width));

			margin-left: var(--margin);
			margin-right: var(--margin);

			font-family: 'Avenir', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
			font-size: min(3vw, 1.7em);
			line-height: 1.2;
			background-color: var(--paper);
			color: var(--ink);
		}

		textarea {
			font-family: 'Courier New', Courier, monospace;
			font-size: inherit;
		}

		#output {
			font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
			white-space: pre;
		}

		code {
			font-size: 0.9rem;
		}

		img {
			width: var(--image-width);
			height: var(--image-height);
			object-fit: contain;
			vertical-align: top;
			display: inline-block;
			/*background-color: black;*/
		}

		.no-image img {
			display: none;
		}

		h1 {
			color: inherit;
			font-size: min(4vw, 2rem);
			font-weight: bold;
			margin-top: 2vw;
			margin-bottom: 2vw;
		}

		h2 { 
			margin-bottom: 1vw;
		}

		p {
			padding: 0;
			margin: 0;
			margin-bottom: 2vw;
		}

		.content {
			/*
			There is space from the top of the text line to the top of the text
			To align an image with the top of the text (not the line), we make a small
			adjustment. This adjustment would likely need to change based on the font and line-height.
			 */
			--adjustment: 0.3vw;
			display: inline-block;
			width: var(--content-width);
			margin-left: var(--margin);
			margin-top: calc(-1 * var(--adjustment, 0));
			/* Visual adjust to align with image */

		}

		.no-image .content {
			margin-left: 0;
			margin-right: 0;
			width: 100%;
		}

		.channel h1 {
			color: var(--brown);
		}

		.channel .content {
			margin-left: 0;
			margin-right: var(--margin);
		}

		.details {
			color: var(--ink-3);
			padding-top: calc(2 * var(--adjustment, 0));
			/* Visual adjust to counter .content's adjustment */
		}

		.duration:not(:empty)::before {
			content: ' â€¢ ';
		}

		.subtitle {
			height: calc(var(--five-lines));
			overflow: hidden;
			text-overflow: ellipsis;
			color: var(--ink-2);
		}

		.item {
			padding: 2vw;
			padding-bottom: 3vw;
		}

		.channel {
			padding: 2vw;
			padding-bottom: 3vw;
		}

		.item[data-selected] {
			background-color: var(--brown);
			color: var(--ink);
			--ink: whitesmoke;
			--ink-2: hsl(0, 0%, 91%);
			--ink-3: hsl(0, 0%, 80%);
		}

		a:focus {
			outline: none;
		}

		.audio {
			text-decoration: none;
			color: inherit;
		}

		#output {
			display: none;
		}

		#input {
			display: none;
		}

		video {
			position: fixed;
			width: 96vw;
			height: 8vw;
			padding: 0;
			margin: 0;
			background-color: var(--paper);
		}

		.spacer {
			height: 8vw;
		}
	</style>
</head>

<body>
	<h1>Behaviour.js - The Web Attribute Component Library</h1>
	<p><a href="behaviour.js">GET THE CODE HERE - behaviour.js</a></p>
	<p>Safari doesn't support web components using the <code>is</code> attribute, so I've implemented a quick library that allows
		you to hook component code to an element using any custom attribute of your choosing.</p>
	<p>Grab the code above to experiment with it if you're interested.</p>
	<p>This has been lightly influenced by Lea Verou's <a
			href="https://github.com/WICG/webcomponents/issues/1029">attributes for all</a> proposal. (If I had not read
		that proposal: I would have tied attributes & behaviours to <code>string</code> element names instead of to
		<code>HTMLElement</code>-derived classes.)</p>

	<h2>Lightning Overview</h2>
	<p>Your code lives in a class derived from <code>Behaviour</code></p>
	<p><code>Behaviour</code> has an <code>element</code> property that holds the element the behaviour is attached to.</p>
	<p><code>Behaviour</code> has <code>connected</code> and <code>disconnected</code> methods that get called when you might expect.</p>
	<p>You register your class against an element class and a list of attribute names using
		<code>registerBehaviour(MyBehaviour, HTMLDivElement, ["my-attribute", "another-attribute"])</code></p>
	<p>You enable behaviour support in a document by calling <code>enableBehaviours(document)</code></p>
	<p>You get a reference to a behaviour from an element using
		<code>getBehaviour(element, MyBehaviour)</code></p>
	<p>That's it really.</p>
	<p></p>
	<p>The code was written at speed and hasn't been tested, but at first glance appears to work. I think the minimal API is interesting.</p>
</body>

</html>